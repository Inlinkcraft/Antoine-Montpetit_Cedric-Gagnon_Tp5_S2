package tests;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import exceptions.ConstructeurException;
import structures.ListeCombinatoire;

public class ListeCombinatoireTest
{
	ListeCombinatoire l1,l2;
	@Before
	public void before() {
		l1 = new ListeCombinatoire(1,5,2);
		l2 = new ListeCombinatoire(1,10,5);
	}
	

	@Test
	public void testListeCombinatoire()
	{	
		try {new ListeCombinatoire(20,10,2);  //min>max
		fail("Constructeur invalide est passé");
		}catch(ConstructeurException e) {}
		try {new ListeCombinatoire(-1,1,2);   //min<MIN
		fail("Constructeur invalide est passé");
		}catch(ConstructeurException e) {}
		try {new ListeCombinatoire(-2,-1,2);  //max<MIN
		fail("Constructeur invalide est passé");
		}catch(ConstructeurException e) {}
		try {new ListeCombinatoire(10,51,2);  //max>MAX 
		fail("Constructeur invalide est passé");
		}catch(ConstructeurException e) {}
		try {new ListeCombinatoire(51,64,2);  //min>MAX
		fail("Constructeur invalide est passé");
		}catch(ConstructeurException e) {}
		try {new ListeCombinatoire(10,20,-1); //long<MIN_L
		fail("Constructeur invalide est passé");
		}catch(ConstructeurException e) {}
	}
	
	//aucun accès aux valeurs générées par genererValeurs, donc pas de junit :(

	@Test
	public void testToString()
	{
		String expected1 = "Limite de l'ensemble : [1, 5]\n" + 
				"Longueur combinaison : 2\n" + 
				"Ensemble : [1, 2, 3, 4, 5]\n" + 
				"Voici les 10 combinaisons : [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]";
		String expected2 = "Limite de l'ensemble : [1, 10]\n" + 
				"Longueur combinaison : 5\n" + 
				"Ensemble : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n" + 
				"Voici les 252 combinaisons : [[1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7], [1, 2, 3, 4, 8], [1, 2, 3, 4, 9], [1, 2, 3, 4, 10], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 5, 8], [1, 2, 3, 5, 9], [1, 2, 3, 5, 10], [1, 2, 3, 6, 7], [1, 2, 3, 6, 8], [1, 2, 3, 6, 9], [1, 2, 3, 6, 10], [1, 2, 3, 7, 8], [1, 2, 3, 7, 9], [1, 2, 3, 7, 10], [1, 2, 3, 8, 9], [1, 2, 3, 8, 10], [1, 2, 3, 9, 10], [1, 2, 4, 5, 6], [1, 2, 4, 5, 7], [1, 2, 4, 5, 8], [1, 2, 4, 5, 9], [1, 2, 4, 5, 10], [1, 2, 4, 6, 7], [1, 2, 4, 6, 8], [1, 2, 4, 6, 9], [1, 2, 4, 6, 10], [1, 2, 4, 7, 8], [1, 2, 4, 7, 9], [1, 2, 4, 7, 10], [1, 2, 4, 8, 9], [1, 2, 4, 8, 10], [1, 2, 4, 9, 10], [1, 2, 5, 6, 7], [1, 2, 5, 6, 8], [1, 2, 5, 6, 9], [1, 2, 5, 6, 10], [1, 2, 5, 7, 8], [1, 2, 5, 7, 9], [1, 2, 5, 7, 10], [1, 2, 5, 8, 9], [1, 2, 5, 8, 10], [1, 2, 5, 9, 10], [1, 2, 6, 7, 8], [1, 2, 6, 7, 9], [1, 2, 6, 7, 10], [1, 2, 6, 8, 9], [1, 2, 6, 8, 10], [1, 2, 6, 9, 10], [1, 2, 7, 8, 9], [1, 2, 7, 8, 10], [1, 2, 7, 9, 10], [1, 2, 8, 9, 10], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7], [1, 3, 4, 5, 8], [1, 3, 4, 5, 9], [1, 3, 4, 5, 10], [1, 3, 4, 6, 7], [1, 3, 4, 6, 8], [1, 3, 4, 6, 9], [1, 3, 4, 6, 10], [1, 3, 4, 7, 8], [1, 3, 4, 7, 9], [1, 3, 4, 7, 10], [1, 3, 4, 8, 9], [1, 3, 4, 8, 10], [1, 3, 4, 9, 10], [1, 3, 5, 6, 7], [1, 3, 5, 6, 8], [1, 3, 5, 6, 9], [1, 3, 5, 6, 10], [1, 3, 5, 7, 8], [1, 3, 5, 7, 9], [1, 3, 5, 7, 10], [1, 3, 5, 8, 9], [1, 3, 5, 8, 10], [1, 3, 5, 9, 10], [1, 3, 6, 7, 8], [1, 3, 6, 7, 9], [1, 3, 6, 7, 10], [1, 3, 6, 8, 9], [1, 3, 6, 8, 10], [1, 3, 6, 9, 10], [1, 3, 7, 8, 9], [1, 3, 7, 8, 10], [1, 3, 7, 9, 10], [1, 3, 8, 9, 10], [1, 4, 5, 6, 7], [1, 4, 5, 6, 8], [1, 4, 5, 6, 9], [1, 4, 5, 6, 10], [1, 4, 5, 7, 8], [1, 4, 5, 7, 9], [1, 4, 5, 7, 10], [1, 4, 5, 8, 9], [1, 4, 5, 8, 10], [1, 4, 5, 9, 10], [1, 4, 6, 7, 8], [1, 4, 6, 7, 9], [1, 4, 6, 7, 10], [1, 4, 6, 8, 9], [1, 4, 6, 8, 10], [1, 4, 6, 9, 10], [1, 4, 7, 8, 9], [1, 4, 7, 8, 10], [1, 4, 7, 9, 10], [1, 4, 8, 9, 10], [1, 5, 6, 7, 8], [1, 5, 6, 7, 9], [1, 5, 6, 7, 10], [1, 5, 6, 8, 9], [1, 5, 6, 8, 10], [1, 5, 6, 9, 10], [1, 5, 7, 8, 9], [1, 5, 7, 8, 10], [1, 5, 7, 9, 10], [1, 5, 8, 9, 10], [1, 6, 7, 8, 9], [1, 6, 7, 8, 10], [1, 6, 7, 9, 10], [1, 6, 8, 9, 10], [1, 7, 8, 9, 10], [2, 3, 4, 5, 6], [2, 3, 4, 5, 7], [2, 3, 4, 5, 8], [2, 3, 4, 5, 9], [2, 3, 4, 5, 10], [2, 3, 4, 6, 7], [2, 3, 4, 6, 8], [2, 3, 4, 6, 9], [2, 3, 4, 6, 10], [2, 3, 4, 7, 8], [2, 3, 4, 7, 9], [2, 3, 4, 7, 10], [2, 3, 4, 8, 9], [2, 3, 4, 8, 10], [2, 3, 4, 9, 10], [2, 3, 5, 6, 7], [2, 3, 5, 6, 8], [2, 3, 5, 6, 9], [2, 3, 5, 6, 10], [2, 3, 5, 7, 8], [2, 3, 5, 7, 9], [2, 3, 5, 7, 10], [2, 3, 5, 8, 9], [2, 3, 5, 8, 10], [2, 3, 5, 9, 10], [2, 3, 6, 7, 8], [2, 3, 6, 7, 9], [2, 3, 6, 7, 10], [2, 3, 6, 8, 9], [2, 3, 6, 8, 10], [2, 3, 6, 9, 10], [2, 3, 7, 8, 9], [2, 3, 7, 8, 10], [2, 3, 7, 9, 10], [2, 3, 8, 9, 10], [2, 4, 5, 6, 7], [2, 4, 5, 6, 8], [2, 4, 5, 6, 9], [2, 4, 5, 6, 10], [2, 4, 5, 7, 8], [2, 4, 5, 7, 9], [2, 4, 5, 7, 10], [2, 4, 5, 8, 9], [2, 4, 5, 8, 10], [2, 4, 5, 9, 10], [2, 4, 6, 7, 8], [2, 4, 6, 7, 9], [2, 4, 6, 7, 10], [2, 4, 6, 8, 9], [2, 4, 6, 8, 10], [2, 4, 6, 9, 10], [2, 4, 7, 8, 9], [2, 4, 7, 8, 10], [2, 4, 7, 9, 10], [2, 4, 8, 9, 10], [2, 5, 6, 7, 8], [2, 5, 6, 7, 9], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 5, 6, 8, 10], [2, 5, 6, 9, 10], [2, 5, 7, 8, 9], [2, 5, 7, 8, 10], [2, 5, 7, 9, 10], [2, 5, 8, 9, 10], [2, 6, 7, 8, 9], [2, 6, 7, 8, 10], [2, 6, 7, 9, 10], [2, 6, 8, 9, 10], [2, 7, 8, 9, 10], [3, 4, 5, 6, 7], [3, 4, 5, 6, 8], [3, 4, 5, 6, 9], [3, 4, 5, 6, 10], [3, 4, 5, 7, 8], [3, 4, 5, 7, 9], [3, 4, 5, 7, 10], [3, 4, 5, 8, 9], [3, 4, 5, 8, 10], [3, 4, 5, 9, 10], [3, 4, 6, 7, 8], [3, 4, 6, 7, 9], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 4, 6, 8, 10], [3, 4, 6, 9, 10], [3, 4, 7, 8, 9], [3, 4, 7, 8, 10], [3, 4, 7, 9, 10], [3, 4, 8, 9, 10], [3, 5, 6, 7, 8], [3, 5, 6, 7, 9], [3, 5, 6, 7, 10], [3, 5, 6, 8, 9], [3, 5, 6, 8, 10], [3, 5, 6, 9, 10], [3, 5, 7, 8, 9], [3, 5, 7, 8, 10], [3, 5, 7, 9, 10], [3, 5, 8, 9, 10], [3, 6, 7, 8, 9], [3, 6, 7, 8, 10], [3, 6, 7, 9, 10], [3, 6, 8, 9, 10], [3, 7, 8, 9, 10], [4, 5, 6, 7, 8], [4, 5, 6, 7, 9], [4, 5, 6, 7, 10], [4, 5, 6, 8, 9], [4, 5, 6, 8, 10], [4, 5, 6, 9, 10], [4, 5, 7, 8, 9], [4, 5, 7, 8, 10], [4, 5, 7, 9, 10], [4, 5, 8, 9, 10], [4, 6, 7, 8, 9], [4, 6, 7, 8, 10], [4, 6, 7, 9, 10], [4, 6, 8, 9, 10], [4, 7, 8, 9, 10], [5, 6, 7, 8, 9], [5, 6, 7, 8, 10], [5, 6, 7, 9, 10], [5, 6, 8, 9, 10], [5, 7, 8, 9, 10], [6, 7, 8, 9, 10]]";
		assertEquals(l1.toString(),expected1);
		assertEquals(l2.toString(),expected2);
	}

}
